{
  "stats": {
    "suites": 15,
    "tests": 48,
    "passes": 47,
    "pending": 0,
    "failures": 1,
    "start": "2025-05-06T10:33:17.741Z",
    "end": "2025-05-06T10:33:17.835Z",
    "duration": 94,
    "testsRegistered": 48,
    "passPercent": 97.91666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "27aa5720-95d8-4159-89bf-e66876c64f89",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "54bb4107-4081-4113-99b9-24d1a0296d0f",
          "title": "Utils module",
          "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\ArrayUtils.test.js",
          "file": "\\test\\ArrayUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8cf258b5-cf0c-4570-a773-98cc9d71a411",
              "title": "findMax",
              "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\ArrayUtils.test.js",
              "file": "\\test\\ArrayUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the maximum value from an array",
                  "fullTitle": "Utils module findMax should return the maximum value from an array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = findMax([1, 2, 3, 4, 5]);\nexpect(result).to.equal(5);",
                  "err": {},
                  "uuid": "446069c8-ece0-4b2a-ad78-6f17305188cc",
                  "parentUUID": "8cf258b5-cf0c-4570-a773-98cc9d71a411",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not an array",
                  "fullTitle": "Utils module findMax should throw an error if input is not an array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => findMax(\"not an array\")).to.throw(\"Input must be an array\");",
                  "err": {},
                  "uuid": "8ace8b1d-6ee4-403e-9eff-a3e57d68ec6d",
                  "parentUUID": "8cf258b5-cf0c-4570-a773-98cc9d71a411",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle an array with negative numbers",
                  "fullTitle": "Utils module findMax should handle an array with negative numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = findMax([-10, -5, -3, -1]);\nexpect(result).to.equal(-1);",
                  "err": {},
                  "uuid": "c91642f4-b91d-42cf-b510-e23de1289efa",
                  "parentUUID": "8cf258b5-cf0c-4570-a773-98cc9d71a411",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "446069c8-ece0-4b2a-ad78-6f17305188cc",
                "8ace8b1d-6ee4-403e-9eff-a3e57d68ec6d",
                "c91642f4-b91d-42cf-b510-e23de1289efa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e4c9309-a679-4328-aded-118e80fcc3f7",
              "title": "findMin",
              "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\ArrayUtils.test.js",
              "file": "\\test\\ArrayUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the minimum value from an array",
                  "fullTitle": "Utils module findMin should return the minimum value from an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = findMin([1, 2, 3, 4, 5]);\nexpect(result).to.equal(1);",
                  "err": {},
                  "uuid": "dded936c-57c7-47e4-b6c0-889f17761aaa",
                  "parentUUID": "7e4c9309-a679-4328-aded-118e80fcc3f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not an array",
                  "fullTitle": "Utils module findMin should throw an error if input is not an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => findMin(null)).to.throw(\"Input must be an array\");",
                  "err": {},
                  "uuid": "9f0996e5-18d2-457f-a3f8-b2324cdac76e",
                  "parentUUID": "7e4c9309-a679-4328-aded-118e80fcc3f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle an array with negative numbers",
                  "fullTitle": "Utils module findMin should handle an array with negative numbers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = findMin([-10, -5, -3, -1]);\nexpect(result).to.equal(-10);",
                  "err": {},
                  "uuid": "1b6f91c0-24a7-40da-b6d3-fbdb8139d3e1",
                  "parentUUID": "7e4c9309-a679-4328-aded-118e80fcc3f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dded936c-57c7-47e4-b6c0-889f17761aaa",
                "9f0996e5-18d2-457f-a3f8-b2324cdac76e",
                "1b6f91c0-24a7-40da-b6d3-fbdb8139d3e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0beb3428-08d1-45d8-b773-e01c29a4476e",
              "title": "removeDuplicates",
              "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\ArrayUtils.test.js",
              "file": "\\test\\ArrayUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array without duplicate values",
                  "fullTitle": "Utils module removeDuplicates should return an array without duplicate values",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = removeDuplicates([1, 2, 2, 3, 4, 4, 5]);\nexpect(result).to.deep.equal([1, 2, 3, 4, 5]);",
                  "err": {},
                  "uuid": "eddf3621-87f9-46a5-af39-6efffa0b5aea",
                  "parentUUID": "0beb3428-08d1-45d8-b773-e01c29a4476e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not an array",
                  "fullTitle": "Utils module removeDuplicates should throw an error if input is not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => removeDuplicates({})).to.throw(\"Input must be an array\");",
                  "err": {},
                  "uuid": "c21c1f68-b759-4442-a354-8963cdf544a9",
                  "parentUUID": "0beb3428-08d1-45d8-b773-e01c29a4476e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle an empty array",
                  "fullTitle": "Utils module removeDuplicates should handle an empty array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = removeDuplicates([]);\nexpect(result).to.deep.equal([]);",
                  "err": {},
                  "uuid": "1d5cd848-25af-4bc8-8000-c16c513880c7",
                  "parentUUID": "0beb3428-08d1-45d8-b773-e01c29a4476e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eddf3621-87f9-46a5-af39-6efffa0b5aea",
                "c21c1f68-b759-4442-a354-8963cdf544a9",
                "1d5cd848-25af-4bc8-8000-c16c513880c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3b929c1a-26d8-47a7-9509-1d2ff728f3d0",
          "title": "mathUtils module",
          "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\mathUtils.test.js",
          "file": "\\test\\mathUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a87329bc-16b1-49b6-bc4e-6ff9b70a8ca6",
              "title": "add",
              "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\mathUtils.test.js",
              "file": "\\test\\mathUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the sum of two numbers",
                  "fullTitle": "mathUtils module add should return the sum of two numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = add(2, 3);\nexpect(result).to.equal(5);",
                  "err": {},
                  "uuid": "504f3dc8-30ab-40c4-933a-8b0ffe5e2878",
                  "parentUUID": "a87329bc-16b1-49b6-bc4e-6ff9b70a8ca6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a negative sum for negative inputs",
                  "fullTitle": "mathUtils module add should return a negative sum for negative inputs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = add(-2, -3);\nexpect(result).to.equal(-5);",
                  "err": {},
                  "uuid": "6de47a55-fbd9-4734-9b1a-a28ffe950c66",
                  "parentUUID": "a87329bc-16b1-49b6-bc4e-6ff9b70a8ca6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle adding zero",
                  "fullTitle": "mathUtils module add should handle adding zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = add(5, 0);\nexpect(result).to.equal(5);",
                  "err": {},
                  "uuid": "9f33bfb2-e284-470e-b3a2-637817d298d4",
                  "parentUUID": "a87329bc-16b1-49b6-bc4e-6ff9b70a8ca6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "504f3dc8-30ab-40c4-933a-8b0ffe5e2878",
                "6de47a55-fbd9-4734-9b1a-a28ffe950c66",
                "9f33bfb2-e284-470e-b3a2-637817d298d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc59ceac-198c-417c-861f-35e8fd64ba79",
              "title": "subtract",
              "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\mathUtils.test.js",
              "file": "\\test\\mathUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the difference of two numbers",
                  "fullTitle": "mathUtils module subtract should return the difference of two numbers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = subtract(5, 3);\nexpect(result).to.equal(2);",
                  "err": {},
                  "uuid": "62d9b142-76ab-43ba-82d2-7ff631078ae6",
                  "parentUUID": "cc59ceac-198c-417c-861f-35e8fd64ba79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a negative result when second number is greater",
                  "fullTitle": "mathUtils module subtract should return a negative result when second number is greater",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = subtract(3, 5);\nexpect(result).to.equal(-2);",
                  "err": {},
                  "uuid": "f8a36ab0-1715-4296-a47b-b11292238495",
                  "parentUUID": "cc59ceac-198c-417c-861f-35e8fd64ba79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle subtracting zero",
                  "fullTitle": "mathUtils module subtract should handle subtracting zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = subtract(5, 0);\nexpect(result).to.equal(5);",
                  "err": {},
                  "uuid": "85d9423a-21ba-4390-bea1-3179b6bf5c5c",
                  "parentUUID": "cc59ceac-198c-417c-861f-35e8fd64ba79",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62d9b142-76ab-43ba-82d2-7ff631078ae6",
                "f8a36ab0-1715-4296-a47b-b11292238495",
                "85d9423a-21ba-4390-bea1-3179b6bf5c5c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2365193f-dded-479c-91cb-a4d5933b187f",
              "title": "multiply",
              "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\mathUtils.test.js",
              "file": "\\test\\mathUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the product of two numbers",
                  "fullTitle": "mathUtils module multiply should return the product of two numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = multiply(2, 3);\nexpect(result).to.equal(6);",
                  "err": {},
                  "uuid": "f804c086-9640-4f64-8469-df1c6496c1be",
                  "parentUUID": "2365193f-dded-479c-91cb-a4d5933b187f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return zero when multiplied by zero",
                  "fullTitle": "mathUtils module multiply should return zero when multiplied by zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = multiply(5, 0);\nexpect(result).to.equal(0);",
                  "err": {},
                  "uuid": "c8fefdff-5a2a-4669-8b6e-5238edb3015e",
                  "parentUUID": "2365193f-dded-479c-91cb-a4d5933b187f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle negative numbers",
                  "fullTitle": "mathUtils module multiply should handle negative numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = multiply(-2, 3);\nexpect(result).to.equal(-6);",
                  "err": {},
                  "uuid": "b8d2308f-a8cb-413a-8e4e-86ab2a649a02",
                  "parentUUID": "2365193f-dded-479c-91cb-a4d5933b187f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f804c086-9640-4f64-8469-df1c6496c1be",
                "c8fefdff-5a2a-4669-8b6e-5238edb3015e",
                "b8d2308f-a8cb-413a-8e4e-86ab2a649a02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d26488e-2bb9-454c-b947-37f8c0529c63",
              "title": "divide",
              "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\mathUtils.test.js",
              "file": "\\test\\mathUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the quotient of two numbers",
                  "fullTitle": "mathUtils module divide should return the quotient of two numbers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = divide(6, 3);\nexpect(result).to.equal(2);",
                  "err": {},
                  "uuid": "c40f8b72-cd2a-472b-8d99-d488c85df34a",
                  "parentUUID": "0d26488e-2bb9-454c-b947-37f8c0529c63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error when dividing by zero",
                  "fullTitle": "mathUtils module divide should throw an error when dividing by zero",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => divide(5, 0)).to.throw(\"Cannot divide by zero\");",
                  "err": {},
                  "uuid": "af0b4016-e3d2-4a31-bb6c-34afc57fc99d",
                  "parentUUID": "0d26488e-2bb9-454c-b947-37f8c0529c63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle negative numbers",
                  "fullTitle": "mathUtils module divide should handle negative numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = divide(-6, 3);\nexpect(result).to.equal(-2);",
                  "err": {},
                  "uuid": "05e0c233-21e6-4b5c-96c5-d21771f43db9",
                  "parentUUID": "0d26488e-2bb9-454c-b947-37f8c0529c63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a fraction if division is not even",
                  "fullTitle": "mathUtils module divide should return a fraction if division is not even",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = divide(5, 2);\nexpect(result).to.equal(2.5);",
                  "err": {},
                  "uuid": "1e5342eb-8bb6-4a4d-adb4-5a75098efa4c",
                  "parentUUID": "0d26488e-2bb9-454c-b947-37f8c0529c63",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c40f8b72-cd2a-472b-8d99-d488c85df34a",
                "af0b4016-e3d2-4a31-bb6c-34afc57fc99d",
                "05e0c233-21e6-4b5c-96c5-d21771f43db9",
                "1e5342eb-8bb6-4a4d-adb4-5a75098efa4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9b9195ef-5caa-4538-b07d-91cd49e62c13",
          "title": "stringUtils module",
          "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\stringUtils.test.js",
          "file": "\\test\\stringUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "68d17599-99d8-4b6d-9394-2ec5a7236095",
              "title": "capitalize",
              "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\stringUtils.test.js",
              "file": "\\test\\stringUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should capitalize the first letter of a string",
                  "fullTitle": "stringUtils module capitalize should capitalize the first letter of a string",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = capitalize(\"hello\");\nexpect(result).to.equal(\"Hello\");",
                  "err": {},
                  "uuid": "f72ae427-4831-40ef-9aeb-6732ee34585d",
                  "parentUUID": "68d17599-99d8-4b6d-9394-2ec5a7236095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle a string that is already capitalized",
                  "fullTitle": "stringUtils module capitalize should handle a string that is already capitalized",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = capitalize(\"Hello\");\nexpect(result).to.equal(\"Hello\");",
                  "err": {},
                  "uuid": "5e5992ff-97d5-4de7-adc4-3e3b30812320",
                  "parentUUID": "68d17599-99d8-4b6d-9394-2ec5a7236095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for non-string inputs",
                  "fullTitle": "stringUtils module capitalize should throw an error for non-string inputs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => capitalize(123)).to.throw(\"Input must be a string\");",
                  "err": {},
                  "uuid": "13c0ac1b-dc05-4bb8-bead-7cbfece65c1f",
                  "parentUUID": "68d17599-99d8-4b6d-9394-2ec5a7236095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle an empty string",
                  "fullTitle": "stringUtils module capitalize should handle an empty string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = capitalize(\"\");\nexpect(result).to.equal(\"\");",
                  "err": {},
                  "uuid": "26dbf34d-1035-4aa6-b9b7-da64fbb848c6",
                  "parentUUID": "68d17599-99d8-4b6d-9394-2ec5a7236095",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f72ae427-4831-40ef-9aeb-6732ee34585d",
                "5e5992ff-97d5-4de7-adc4-3e3b30812320",
                "13c0ac1b-dc05-4bb8-bead-7cbfece65c1f",
                "26dbf34d-1035-4aa6-b9b7-da64fbb848c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa37f94b-fbc9-4dc4-899b-e00625c61569",
              "title": "reverseString",
              "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\stringUtils.test.js",
              "file": "\\test\\stringUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should reverse a string",
                  "fullTitle": "stringUtils module reverseString should reverse a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = reverseString(\"hello\");\nexpect(result).to.equal(\"olleh\");",
                  "err": {},
                  "uuid": "adc7b8d1-3161-45e5-a84d-9441df0c4583",
                  "parentUUID": "aa37f94b-fbc9-4dc4-899b-e00625c61569",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle a string with spaces",
                  "fullTitle": "stringUtils module reverseString should handle a string with spaces",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = reverseString(\"hello world\");\nexpect(result).to.equal(\"dlrow olleh\");",
                  "err": {},
                  "uuid": "153670fe-5b4d-4f12-bb98-deed1bddedd3",
                  "parentUUID": "aa37f94b-fbc9-4dc4-899b-e00625c61569",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for non-string inputs",
                  "fullTitle": "stringUtils module reverseString should throw an error for non-string inputs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => reverseString(null)).to.throw(\"Input must be a string\");",
                  "err": {},
                  "uuid": "8bc7ff71-c585-4019-a9d4-d92b5224f4c1",
                  "parentUUID": "aa37f94b-fbc9-4dc4-899b-e00625c61569",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle an empty string",
                  "fullTitle": "stringUtils module reverseString should handle an empty string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = reverseString(\"\");\nexpect(result).to.equal(\"\");",
                  "err": {},
                  "uuid": "d36e92cd-e43c-4472-9530-afe9cc7c8dd4",
                  "parentUUID": "aa37f94b-fbc9-4dc4-899b-e00625c61569",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "adc7b8d1-3161-45e5-a84d-9441df0c4583",
                "153670fe-5b4d-4f12-bb98-deed1bddedd3",
                "8bc7ff71-c585-4019-a9d4-d92b5224f4c1",
                "d36e92cd-e43c-4472-9530-afe9cc7c8dd4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ec37f84-e4dc-40f7-b98d-b77d21262840",
              "title": "isPalindrome",
              "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\stringUtils.test.js",
              "file": "\\test\\stringUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a palindrome",
                  "fullTitle": "stringUtils module isPalindrome should return true for a palindrome",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = isPalindrome(\"madam\");\nexpect(result).to.be.true;",
                  "err": {},
                  "uuid": "f2223075-2bce-42fe-a5b9-334ed24ced2f",
                  "parentUUID": "7ec37f84-e4dc-40f7-b98d-b77d21262840",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a non-palindrome",
                  "fullTitle": "stringUtils module isPalindrome should return false for a non-palindrome",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = isPalindrome(\"hello\");\nexpect(result).to.be.false;",
                  "err": {},
                  "uuid": "410bd5b0-7f15-4c4a-b382-46e01e1c3453",
                  "parentUUID": "7ec37f84-e4dc-40f7-b98d-b77d21262840",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for a single character",
                  "fullTitle": "stringUtils module isPalindrome should return true for a single character",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = isPalindrome(\"a\");\nexpect(result).to.be.true;",
                  "err": {},
                  "uuid": "b7c47ec1-b30e-4d14-8e0e-8a613bda5b4e",
                  "parentUUID": "7ec37f84-e4dc-40f7-b98d-b77d21262840",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for non-string inputs",
                  "fullTitle": "stringUtils module isPalindrome should throw an error for non-string inputs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => isPalindrome(12321)).to.throw(\"Input must be a string\");",
                  "err": {},
                  "uuid": "6e5416ad-a352-4df6-8d82-bd9edb0502a5",
                  "parentUUID": "7ec37f84-e4dc-40f7-b98d-b77d21262840",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for an empty string (edge case)",
                  "fullTitle": "stringUtils module isPalindrome should return true for an empty string (edge case)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = isPalindrome(\"\");\nexpect(result).to.be.true;",
                  "err": {},
                  "uuid": "eddde901-d759-48f0-ba4a-3359eaffa7bf",
                  "parentUUID": "7ec37f84-e4dc-40f7-b98d-b77d21262840",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2223075-2bce-42fe-a5b9-334ed24ced2f",
                "410bd5b0-7f15-4c4a-b382-46e01e1c3453",
                "b7c47ec1-b30e-4d14-8e0e-8a613bda5b4e",
                "6e5416ad-a352-4df6-8d82-bd9edb0502a5",
                "eddde901-d759-48f0-ba4a-3359eaffa7bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "013c0a28-48d2-41b5-9c10-666e09205201",
          "title": "checkStudentKnowledge",
          "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\studentKnowledgeCheckerUtil.test.js",
          "file": "\\test\\studentKnowledgeCheckerUtil.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true if all student answers are correct",
              "fullTitle": "checkStudentKnowledge should return true if all student answers are correct",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const correctAnswers = { q1: 'A', q2: 'B', q3: 'C' };\nconst studentAnswers = { q1: 'A', q2: 'B', q3: 'C' };\nconst result = checkStudentKnowledge(correctAnswers, studentAnswers);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "90f5f6d5-6eea-4f96-acbf-2d99d618ab8f",
              "parentUUID": "013c0a28-48d2-41b5-9c10-666e09205201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if one or more student answers are incorrect",
              "fullTitle": "checkStudentKnowledge should return false if one or more student answers are incorrect",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const correctAnswers = { q1: 'A', q2: 'B', q3: 'C' };\nconst studentAnswers = { q1: 'A', q2: 'C', q3: 'C' };\nconst result = checkStudentKnowledge(correctAnswers, studentAnswers);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "15743c8c-602d-4033-9495-6f887f65052a",
              "parentUUID": "013c0a28-48d2-41b5-9c10-666e09205201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the number of questions in student answers is less than correct answers",
              "fullTitle": "checkStudentKnowledge should return false if the number of questions in student answers is less than correct answers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const correctAnswers = { q1: 'A', q2: 'B', q3: 'C' };\nconst studentAnswers = { q1: 'A', q2: 'B' };\nconst result = checkStudentKnowledge(correctAnswers, studentAnswers);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "84a39093-56fa-4210-b71e-e111eeee3f1a",
              "parentUUID": "013c0a28-48d2-41b5-9c10-666e09205201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the number of questions in student answers is greater than correct answers",
              "fullTitle": "checkStudentKnowledge should return false if the number of questions in student answers is greater than correct answers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const correctAnswers = { q1: 'A', q2: 'B' };\nconst studentAnswers = { q1: 'A', q2: 'B', q3: 'C' };\nconst result = checkStudentKnowledge(correctAnswers, studentAnswers);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "8c762ad0-b86d-4532-b50e-2c499096ddc2",
              "parentUUID": "013c0a28-48d2-41b5-9c10-666e09205201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if question keys do not match",
              "fullTitle": "checkStudentKnowledge should return false if question keys do not match",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const correctAnswers = { q1: 'A', q2: 'B', q3: 'C' };\nconst studentAnswers = { q1: 'A', q2: 'B', q4: 'C' };\nconst result = checkStudentKnowledge(correctAnswers, studentAnswers);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "998c2121-044e-4257-bd02-09462fd33a75",
              "parentUUID": "013c0a28-48d2-41b5-9c10-666e09205201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty objects as student and correct answers (return true)",
              "fullTitle": "checkStudentKnowledge should handle empty objects as student and correct answers (return true)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const correctAnswers = {};\nconst studentAnswers = {};\nconst result = checkStudentKnowledge(correctAnswers, studentAnswers);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "74d9bf3f-6c3b-438d-b6ac-9c528fd47d94",
              "parentUUID": "013c0a28-48d2-41b5-9c10-666e09205201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if correct answers are empty and student answers are not",
              "fullTitle": "checkStudentKnowledge should return false if correct answers are empty and student answers are not",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const correctAnswers = {};\nconst studentAnswers = { q1: 'A' };\nconst result = checkStudentKnowledge(correctAnswers, studentAnswers);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "b8fb51d2-d6ee-4a38-9188-27e547465069",
              "parentUUID": "013c0a28-48d2-41b5-9c10-666e09205201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if student answers are empty and correct answers are not",
              "fullTitle": "checkStudentKnowledge should return false if student answers are empty and correct answers are not",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const correctAnswers = { q1: 'A' };\nconst studentAnswers = {};\nconst result = checkStudentKnowledge(correctAnswers, studentAnswers);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "1e44cca4-cb61-494b-82ae-341d6209924e",
              "parentUUID": "013c0a28-48d2-41b5-9c10-666e09205201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for answers with identical keys and values in different orders",
              "fullTitle": "checkStudentKnowledge should return true for answers with identical keys and values in different orders",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const correctAnswers = { q1: 'A', q2: 'B', q3: 'C' };\nconst studentAnswers = { q3: 'C', q1: 'A', q2: 'B' };\nconst result = checkStudentKnowledge(correctAnswers, studentAnswers);\nexpect(result).to.be.true;",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///C:/Users/artem/Desktop/testing/test/studentKnowledgeCheckerUtil.test.js:65:29)\n    at process.processImmediate (node:internal/timers:485:21)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "bfb5b9c5-1775-4cf0-ad40-d1cfdaa0a02b",
              "parentUUID": "013c0a28-48d2-41b5-9c10-666e09205201",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90f5f6d5-6eea-4f96-acbf-2d99d618ab8f",
            "15743c8c-602d-4033-9495-6f887f65052a",
            "84a39093-56fa-4210-b71e-e111eeee3f1a",
            "8c762ad0-b86d-4532-b50e-2c499096ddc2",
            "998c2121-044e-4257-bd02-09462fd33a75",
            "74d9bf3f-6c3b-438d-b6ac-9c528fd47d94",
            "b8fb51d2-d6ee-4a38-9188-27e547465069",
            "1e44cca4-cb61-494b-82ae-341d6209924e"
          ],
          "failures": [
            "bfb5b9c5-1775-4cf0-ad40-d1cfdaa0a02b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4dc018eb-38b4-4f47-9c36-12afc4cdc590",
          "title": "filterUsersByAge",
          "fullFile": "C:\\Users\\artem\\Desktop\\testing\\test\\usersListUtils.test.js",
          "file": "\\test\\usersListUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return users within the age range (18 to Infinity)",
              "fullTitle": "filterUsersByAge should return users within the age range (18 to Infinity)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = filterUsersByAge(users, 18, Infinity);\nexpect(result).to.deep.equal([\n    { name: 'Alice', age: 25 },\n    { name: 'Charlie', age: 30 }\n]);",
              "err": {},
              "uuid": "62955da8-345d-4211-874d-7b6233e23c93",
              "parentUUID": "4dc018eb-38b4-4f47-9c36-12afc4cdc590",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no users are older than or equal to the specified age",
              "fullTitle": "filterUsersByAge should return an empty array if no users are older than or equal to the specified age",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = filterUsersByAge(users, 40, Infinity);\nexpect(result).to.deep.equal([]);",
              "err": {},
              "uuid": "409145eb-b054-480e-8cfd-149bb0f84014",
              "parentUUID": "4dc018eb-38b4-4f47-9c36-12afc4cdc590",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the full list of users if the specified age is 0",
              "fullTitle": "filterUsersByAge should return the full list of users if the specified age is 0",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = filterUsersByAge(users, 0, Infinity);\nexpect(result).to.deep.equal(users);",
              "err": {},
              "uuid": "5aa899c0-a2e1-400f-ba74-69592d288558",
              "parentUUID": "4dc018eb-38b4-4f47-9c36-12afc4cdc590",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an empty users array (return empty array)",
              "fullTitle": "filterUsersByAge should handle an empty users array (return empty array)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = filterUsersByAge([], 18, Infinity);\nexpect(result).to.deep.equal([]);",
              "err": {},
              "uuid": "925fea3d-5943-4b8b-817a-0d4f585e7764",
              "parentUUID": "4dc018eb-38b4-4f47-9c36-12afc4cdc590",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "62955da8-345d-4211-874d-7b6233e23c93",
            "409145eb-b054-480e-8cfd-149bb0f84014",
            "5aa899c0-a2e1-400f-ba74-69592d288558",
            "925fea3d-5943-4b8b-817a-0d4f585e7764"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}